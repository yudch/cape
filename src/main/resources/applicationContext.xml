<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xmlns:mongo="http://www.springframework.org/schema/data/mongo" 
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	    http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd"
        default-lazy-init="true">

	<description>Spring公共配置 </description>
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>file:/etc/ecconfig/application1.properties</value>
            </list>
        </property>
    </bean>
    
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 base-package="org.web,org.iweb"-->
	<context:component-scan base-package="org.web">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> 
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<property name="packagesToScan" value="org.web.cape"/>
		<property name="jpaProperties">
			<props>
				<!-- 命名规则 My_NAME->MyName -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">true</prop>  
			</props>
		</property>
	</bean>
	
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="org.springside.modules.persistence.Hibernates">
				<constructor-arg ref="dataSource"/>
			</bean>
		</property>
	</bean>

	<!-- Spring Data Jpa配置 -->
 	<jpa:repositories base-package="org.web.cape"  transaction-manager-ref="transactionManager" factory-class="org.springframework.data.jpa.repository.support.CustomJpaRepositoryFactoryBean" entity-manager-factory-ref="entityManagerFactory"/>
   
	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
 	
 	<!-- freemarker的配置 -->  
    <bean id="freemarkerConfigurer"  
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
        <property name="templateLoaderPath" value="/WEB-INF/views/" />  
        <property name="defaultEncoding" value="UTF-8" />  
        <property name="freemarkerSettings">  
            <props>  
                <prop key="template_update_delay">10</prop>  
                <prop key="locale">zh_CN</prop>  
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
                <prop key="date_format">yyyy-MM-dd</prop>
            </props>  
        </property>  
        <property name="freemarkerVariables">
  			<map>  
            	<entry key="ctx" value="/cape" />                
        	</map>        	
        </property>
    </bean>  	
    
 	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/application.properties" />	
	
	<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	
		<!-- Connection Pooling Info -->
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
		<property name="minIdle" value="0" />
		<property name="maxWait" value="${jdbc.pool.maxWait}" />
		<property name="defaultAutoCommit" value="true" />
		
		<property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
		<property name="removeAbandoned" value="${jdbc.pool.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.pool.removeAbandonedTimeout}" />
	</bean>
	
	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
 	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
    </bean>	
    
	<bean id="redisPool" class="org.web.cache.redis.RedisPoolFactory"
		scope="prototype" factory-method="createJedisPool">
		<constructor-arg value="${redis.url}" />
	</bean>
	<bean id="jedisTemplate" class="org.springside.modules.nosql.redis.JedisTemplate">
		<constructor-arg ref="redisPool"></constructor-arg>
	</bean>    
</beans>
<!-- 
		事物传播行为介绍: 
		@Transactional(propagation=Propagation.REQUIRED) 
		如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)
		@Transactional(propagation=Propagation.NOT_SUPPORTED) 
		容器不为这个方法开启事务
		@Transactional(propagation=Propagation.REQUIRES_NEW) 
		不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务
		@Transactional(propagation=Propagation.MANDATORY) 
		必须在一个已有的事务中执行,否则抛出异常
		@Transactional(propagation=Propagation.NEVER) 
		必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)
		@Transactional(propagation=Propagation.SUPPORTS) 
		如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.
		
		事物超时设置:
		@Transactional(timeout=30) //默认是30秒
		
		事务隔离级别:
		@Transactional(isolation = Isolation.READ_UNCOMMITTED)
		读取未提交数据(会出现脏读, 不可重复读) 基本不使用
		@Transactional(isolation = Isolation.READ_COMMITTED)
		读取已提交数据(会出现不可重复读和幻读)
		@Transactional(isolation = Isolation.REPEATABLE_READ)
		可重复读(会出现幻读)
		@Transactional(isolation = Isolation.SERIALIZABLE)
		串行化
		
		MYSQL: 默认为REPEATABLE_READ级别
		SQLSERVER: 默认为READ_COMMITTED
		
		脏读 : 一个事务读取到另一事务未提交的更新数据
		不可重复读 : 在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说, 
		后续读取可以读到另一事务已提交的更新数据. 相反, "可重复读"在同一事务中多次
		读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据
		幻读 : 一个事务读到另一个事务已提交的insert数据
		
		@Transactional注解中常用参数说明
		
		参 数 名 称
		
		功 能 描 述
		
		readOnly
		
		该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。例如：@Transactional(readOnly=true)
		
		rollbackFor
		
		该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：
		
		指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)
		
		指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})
		
		 续表）
		
		参 数 名 称
		
		功 能 描 述
		
		rollbackForClassName
		
		该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：
		
		指定单一异常类名称：@Transactional(rollbackForClassName="RuntimeException")
		
		指定多个异常类名称：@Transactional(rollbackForClassName={"RuntimeException","Exception"})
		
		noRollbackFor
		
		该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：
		
		指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)
		
		指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})
		
		noRollbackForClassName
		
		该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：
		
		指定单一异常类名称：@Transactional(noRollbackForClassName="RuntimeException")
		
		指定多个异常类名称：
		
		@Transactional(noRollbackForClassName={"RuntimeException","Exception"})
		
		propagation
		
		该属性用于设置事务的传播行为，具体取值可参考表6-7。
		
		例如：@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)
		
		isolation
		
		该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置
		
		timeout
		
		该属性用于设置事务的超时秒数，默认值为-1表示永不超时
		
		注意的几点:
		1 @Transactional 只能被应用到public方法上, 对于其它非public的方法,如果标记了@Transactional也不会报错,但方法没有事务功能.
		
		2用 spring 事务管理器,由spring来负责数据库的打开,提交,回滚.默认遇到运行期例外(throw new RuntimeException("注释");)会回滚，即遇到不受检查（unchecked）的例外时回滚；而遇到需要捕获的例外(throw new Exception("注释");)不会回滚,即遇到受检查的例外（就是非运行时抛出的异常，编译器会检查到的异常叫受检查例外或说受检查异常）时，需我们指定方式来让事务回滚 要想所有异常都回滚,要加上 @Transactional( rollbackFor={Exception.class,其它异常}) .如果让unchecked例外不回滚： @Transactional(notRollbackFor=RunTimeException.class)
		如下:
		@Transactional(rollbackFor=Exception.class) //指定回滚,遇到异常Exception时回滚
		public void methodName() {
		throw new Exception("注释");
		
		}
		@Transactional(noRollbackFor=Exception.class)//指定不回滚,遇到运行期例外(throw new RuntimeException("注释");)会回滚
		public ItimDaoImpl getItemDaoImpl() {
		throw new RuntimeException("注释");
		}
		3、@Transactional 注解应该只被应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。
		4、@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。然而，请注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据，能够被可以识别 @Transactional 注解和上述的配置适当的具有事务行为的beans所使用。上面的例子中，其实正是 <tx:annotation-driven/>元素的出现 开启 了事务行为。
		5、Spring团队的建议是你在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。你当然可以在接口上使用 @Transactional 注解，但是这将只能当你设置了基于接口的代理时它才生效。因为注解是 不能继承 的，这就意味着如果你正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装（将被确认为严重的）。因 此，请接受Spring团队的建议并且在具体的类上使用 @Transactional 注解。
 -->